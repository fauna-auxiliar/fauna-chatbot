from fastapi import FastAPI, Request
from fastapi.middleware.cors import CORSMiddleware
import requests
import openai
import os

app = FastAPI()

openai.api_key = os.getenv("OPENAI_API_KEY")

app.add_middleware(
    CORSMiddleware,
    allow_origins=["*"],
    allow_methods=["*"],
    allow_headers=["*"],
)

def get_blog_posts():
    url = "https://faunaauxiliar.blogspot.com/feeds/posts/default?alt=json"
    r = requests.get(url).json()
    posts = []
    for entry in r.get("feed", {}).get("entry", []):
        title = entry["title"]["$t"]
        link = [l["href"] for l in entry["link"] if l["rel"] == "alternate"][0]
        content = entry.get("content", {}).get("$t", "")
        posts.append({"title": title, "link": link, "content": content})
    return posts

BLOG_POSTS = get_blog_posts()

@app.post("/chat")
async def chat(request: Request):
    data = await request.json()
    question = data.get("question", "")

    context = ""
    for p in BLOG_POSTS[:10]:
        context += f"Título: {p['title']}\nContenido: {p['content'][:500]}...\n\n"

    prompt = f"""
    Eres un asistente especializado en fauna auxiliar agrícola. 
    Responde únicamente usando la siguiente información del blog:

    {context}

    Pregunta: {question}
    """

    response = openai.ChatCompletion.create(
        model="gpt-3.5-turbo",
        messages=[{"role": "user", "content": prompt}],
        temperature=0.3,
        max_tokens=300
    )

    answer = response["choices"][0]["message"]["content"]
    return {"answer": answer}
